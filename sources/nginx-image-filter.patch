--- a/src/http/modules/ngx_http_image_filter_module.c	2017-07-11 13:24:08.000000000 +0000
+++ b/src/http/modules/ngx_http_image_filter_module.c	2017-09-07 06:19:42.544481914 +0000
@@ -18,7 +18,8 @@
 #define NGX_HTTP_IMAGE_RESIZE    3
 #define NGX_HTTP_IMAGE_CROP      4
 #define NGX_HTTP_IMAGE_ROTATE    5
-
+#define NGX_HTTP_IMAGE_WATERMARK 6
+#define NGX_HTTP_IMAGE_BOX       7
 
 #define NGX_HTTP_IMAGE_START     0
 #define NGX_HTTP_IMAGE_READ      1
@@ -49,12 +50,22 @@
     ngx_flag_t                   transparency;
     ngx_flag_t                   interlace;
 
+    ngx_flag_t                   conv_png;
+    ngx_flag_t                   white_tp;
+
+    ngx_str_t                    watermark;  // watermark file url
+    ngx_str_t                    watermark_position; // top-left|top-right|bottom-right|bottom-left
+    ngx_int_t                    watermark_width_from; // width from use watermark
+    ngx_int_t                    watermark_height_from; // height from use watermark
+
     ngx_http_complex_value_t    *wcv;
     ngx_http_complex_value_t    *hcv;
     ngx_http_complex_value_t    *acv;
     ngx_http_complex_value_t    *jqcv;
     ngx_http_complex_value_t    *wqcv;
     ngx_http_complex_value_t    *shcv;
+    ngx_http_complex_value_t    *wmcv;
+    ngx_http_complex_value_t    *wmpcv;
 
     size_t                       buffer_size;
 } ngx_http_image_filter_conf_t;
@@ -163,6 +174,20 @@
       offsetof(ngx_http_image_filter_conf_t, interlace),
       NULL },
 
+   { ngx_string("image_filter_conv_png"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_image_filter_conf_t, conv_png),
+      NULL },
+
+   { ngx_string("image_filter_white_tp"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_image_filter_conf_t, white_tp),
+      NULL },
+
     { ngx_string("image_filter_buffer"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_size_slot,
@@ -170,6 +195,33 @@
       offsetof(ngx_http_image_filter_conf_t, buffer_size),
       NULL },
 
+    { ngx_string("image_filter_watermark"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_http_set_complex_value_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_image_filter_conf_t, wmcv),
+      NULL },
+    { ngx_string("image_filter_watermark_position"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_http_set_complex_value_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_image_filter_conf_t, wmpcv),
+      NULL },
+
+    { ngx_string("image_filter_watermark_height_from"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_num_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_image_filter_conf_t, watermark_height_from),
+      NULL },
+
+    { ngx_string("image_filter_watermark_width_from"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_num_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_image_filter_conf_t, watermark_width_from),
+      NULL },
+
       ngx_null_command
 };
 
@@ -520,6 +572,22 @@
     return NGX_AGAIN;
 }
 
+static ngx_str_t
+ngx_http_image_filter_get_str_value(ngx_http_request_t *r,
+    ngx_http_complex_value_t *cv, ngx_str_t v)
+{
+    ngx_str_t  val;
+    
+    if (cv == NULL) {
+        return v;
+    }
+
+    if (ngx_http_complex_value(r, cv, &val) != NGX_OK) {
+        return val;
+    }
+
+    return val;
+}
 
 static ngx_buf_t *
 ngx_http_image_process(ngx_http_request_t *r)
@@ -551,6 +619,30 @@
         return ngx_http_image_resize(r, ctx);
     }
 
+    if (conf->wmcv || conf->watermark.data) {
+        ngx_str_t  watermark_value;
+        watermark_value = ngx_http_image_filter_get_str_value(r, conf->wmcv, conf->watermark);
+        conf->watermark.data = ngx_pcalloc(r->pool, watermark_value.len + 1);
+        ngx_cpystrn(conf->watermark.data, watermark_value.data, watermark_value.len+1);
+
+        conf->watermark.len = watermark_value.len;
+
+        ngx_str_t  watermark_position_value;
+        watermark_position_value = ngx_http_image_filter_get_str_value(r, conf->wmpcv, conf->watermark_position);
+        conf->watermark_position.data = ngx_pcalloc(r->pool, watermark_position_value.len + 1);
+        ngx_cpystrn(conf->watermark_position.data, watermark_position_value.data, watermark_position_value.len+1);
+       
+        conf->watermark_position.len = watermark_position_value.len;
+
+        if (conf->filter == NGX_HTTP_IMAGE_WATERMARK) {
+            if (!conf->watermark.data) {
+                return NULL;
+            }
+       
+            return ngx_http_image_resize(r, ctx);
+        }
+    }
+
     ctx->max_width = ngx_http_image_filter_get_value(r, conf->wcv, conf->width);
     if (ctx->max_width == 0) {
         return NULL;
@@ -566,7 +658,9 @@
         && ctx->width <= ctx->max_width
         && ctx->height <= ctx->max_height
         && ctx->angle == 0
-        && !ctx->force)
+        && !ctx->force
+        && !conf->watermark.data
+        && conf->filter != NGX_HTTP_IMAGE_BOX)
     {
         return ngx_http_image_asis(r, ctx);
     }
@@ -821,7 +915,7 @@
 {
     int                            sx, sy, dx, dy, ox, oy, ax, ay, size,
                                    colors, palette, transparent, sharpen,
-                                   red, green, blue, t;
+                                   red, green, blue, t, white;
     u_char                        *out;
     ngx_buf_t                     *b;
     ngx_uint_t                     resize;
@@ -843,7 +937,9 @@
     if (!ctx->force
         && ctx->angle == 0
         && (ngx_uint_t) sx <= ctx->max_width
-        && (ngx_uint_t) sy <= ctx->max_height)
+        && (ngx_uint_t) sy <= ctx->max_height
+        && !conf->watermark.data
+        && conf->filter != NGX_HTTP_IMAGE_BOX)
     {
         gdImageDestroy(src);
         return ngx_http_image_asis(r, ctx);
@@ -877,7 +973,7 @@
     dx = sx;
     dy = sy;
 
-    if (conf->filter == NGX_HTTP_IMAGE_RESIZE) {
+    if (conf->filter == NGX_HTTP_IMAGE_RESIZE || conf->filter == NGX_HTTP_IMAGE_BOX) {
 
         if ((ngx_uint_t) dx > ctx->max_width) {
             dy = dy * ctx->max_width / dx;
@@ -897,6 +993,10 @@
 
         resize = 0;
 
+    } else if (conf->filter == NGX_HTTP_IMAGE_WATERMARK) {
+
+        resize = 0;
+
     } else { /* NGX_HTTP_IMAGE_CROP */
 
         resize = 0;
@@ -1036,12 +1136,135 @@
 
             gdImageDestroy(src);
         }
+
+    } else if (conf->filter == NGX_HTTP_IMAGE_BOX) {
+
+        src = dst;
+
+        if ((ngx_uint_t) dx < ctx->max_width) {
+            ox = ctx->max_width - dx;
+        } else {
+            ox = 0;
+        }
+
+        if ((ngx_uint_t) dy < ctx->max_height) {
+            oy = ctx->max_height - dy;
+        } else {
+            oy = 0;
+        }
+
+        if(ox || oy) {
+            dst = ngx_http_image_new(r, dx + ox, dy + oy, colors);
+
+            ox /= 2; // we'll center it
+            oy /= 2;
+            
+            if (colors == 0 || conf->transparency) {
+                gdImageSaveAlpha(dst, 1);
+                gdImageAlphaBlending(dst, 0);
+            }
+
+            white = gdImageColorAllocateAlpha(dst, 255, 255, 255, 127);
+            gdImageFill(dst, 0, 0, white);
+
+            gdImageCopy(dst, src, ox, oy, 0, 0, dx, dy);
+
+            if (colors) {
+                gdImageTrueColorToPalette(dst, 1, 256);
+            }
+
+            gdImageDestroy(src);
+        }
     }
 
     if (transparent != -1 && colors) {
         gdImageColorTransparent(dst, gdImageColorExact(dst, red, green, blue));
     }
 
+    if (conf->watermark.data) {
+        int min_w, min_h;
+
+        min_w=ctx->max_width;
+        min_h=ctx->max_height;
+
+        if (!ctx->max_width && !ctx->max_height) {
+            min_w=sx;
+            min_h=sy;
+        }
+
+        if ( min_w >= conf->watermark_width_from &&
+             min_h >= conf->watermark_height_from) {
+
+            FILE *watermark_file = fopen((const char *)conf->watermark.data, "r");
+
+            if (watermark_file) {
+                gdImagePtr watermark, watermark_mix;
+                ngx_int_t wdx = 0, wdy = 0;
+
+                watermark = gdImageCreateFromPng(watermark_file);
+
+                if(watermark != NULL) {
+                    watermark_mix = gdImageCreateTrueColor(watermark->sx, watermark->sy);
+                    if (ngx_strcmp(conf->watermark_position.data, "bottom-right") == 0) {
+                        wdx = (int)dst->sx - watermark->sx - 10;
+                        wdy = (int)dst->sy - watermark->sy - 10;
+                    } else if (ngx_strcmp(conf->watermark_position.data, "top-left") == 0) {
+                        wdx = wdy = 10;
+                    } else if (ngx_strcmp(conf->watermark_position.data, "top-right") == 0) {
+                        wdx = (int)dst->sx - watermark->sx - 10;
+                        wdy = 10;
+                    } else if (ngx_strcmp(conf->watermark_position.data, "bottom-left") == 0) {
+                        wdx = 10;
+                        wdy = (int)dst->sy - watermark->sy - 10;
+                    } else if (ngx_strcmp(conf->watermark_position.data, "top-center") == 0) {
+                        wdy = 10;
+                        wdx = (int)dst->sx/2 - (int)watermark->sx/2;
+                    } else if (ngx_strcmp(conf->watermark_position.data, "bottom-center") == 0) {
+                        wdx = (int)dst->sx/2 - (int)watermark->sx/2;
+                        wdy = (int)dst->sy - watermark->sy - 10;
+                    } else if (ngx_strcmp(conf->watermark_position.data, "left-center") == 0) {
+                        wdx = 10;
+                        wdy = (int)dst->sy/2 - (int)watermark->sy/2;
+                    } else if (ngx_strcmp(conf->watermark_position.data, "right-center") == 0) {
+                        wdx = (int)dst->sx - watermark->sx - 10;
+                        wdy = (int)dst->sy/2 - (int)watermark->sy/2;
+                    } else if (ngx_strcmp(conf->watermark_position.data, "center-center") == 0) {
+                        wdx = (int)dst->sx/2 - (int)watermark->sx/2;
+                        wdy = (int)dst->sy/2 - (int)watermark->sy/2;
+                    } else if (ngx_strcmp(conf->watermark_position.data, "center-random") == 0) {
+                        ngx_int_t randomBit = rand() & 1;
+                        if (randomBit) {
+                            wdx = ((int)dst->sx/2 - (int)watermark->sx/2) - (int)((double)rand() / ((double)RAND_MAX + 1) * 15);
+                            wdy = ((int)dst->sy/2 - (int)watermark->sy/2) + (int)((double)rand() / ((double)RAND_MAX + 1) * 15);
+                        } else {
+                            wdx = ((int)dst->sx/2 - (int)watermark->sx/2) + (int)((double)rand() / ((double)RAND_MAX + 1) * 15);
+                            wdy = ((int)dst->sy/2 - (int)watermark->sy/2) - (int)((double)rand() / ((double)RAND_MAX + 1) * 15);
+                        }
+                    }
+
+                    gdImageCopy(watermark_mix, dst, 0, 0, wdx, wdy, watermark->sx, watermark->sy);
+                    gdImageCopy(watermark_mix, watermark, 0, 0, 0, 0, watermark->sx, watermark->sy);
+                    gdImageCopyMerge(dst, watermark_mix, wdx, wdy, 0, 0, watermark->sx, watermark->sy, 75);
+                    gdImageDestroy(watermark_mix);
+
+                 } else {
+                     ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "watermark file '%s' is not PNG", conf->watermark.data);
+                 }
+
+                 gdImageDestroy(watermark);
+             } else {
+                 ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "watermark file '%s' not found", conf->watermark.data);
+             }
+
+            fclose(watermark_file);
+        } else {
+            if (conf->filter == NGX_HTTP_IMAGE_WATERMARK) {
+                gdImageDestroy(src);
+                return ngx_http_image_asis(r, ctx);
+            }
+        }
+    }
+
     sharpen = ngx_http_image_filter_get_value(r, conf->shcv, conf->sharpen);
     if (sharpen > 0) {
         gdImageSharpen(dst, sharpen);
@@ -1179,13 +1402,18 @@
     case NGX_HTTP_IMAGE_JPEG:
         conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);
 
-        q = ngx_http_image_filter_get_value(r, conf->jqcv, conf->jpeg_quality);
-        if (q <= 0) {
-            return NULL;
+        if (conf->conv_png) {
+            out = gdImagePngPtr(img, size);
+            failed = "gdImagePngPtr() failed";
+        } else {
+            q = ngx_http_image_filter_get_value(r, conf->jqcv, conf->jpeg_quality);
+            if (q <= 0) {
+                return NULL;
+            }
+            out = gdImageJpegPtr(img, size, q);
+            failed = "gdImageJpegPtr() failed";
         }
 
-        out = gdImageJpegPtr(img, size, q);
-        failed = "gdImageJpegPtr() failed";
         break;
 
     case NGX_HTTP_IMAGE_GIF:
@@ -1301,7 +1529,11 @@
     conf->sharpen = NGX_CONF_UNSET_UINT;
     conf->transparency = NGX_CONF_UNSET;
     conf->interlace = NGX_CONF_UNSET;
+    conf->conv_png = NGX_CONF_UNSET;
+    conf->white_tp = NGX_CONF_UNSET;
     conf->buffer_size = NGX_CONF_UNSET_SIZE;
+    conf->watermark_width_from = NGX_CONF_UNSET_UINT;
+    conf->watermark_height_from = NGX_CONF_UNSET_UINT;
 
     return conf;
 }
@@ -1361,9 +1593,19 @@
 
     ngx_conf_merge_value(conf->interlace, prev->interlace, 0);
 
+    ngx_conf_merge_value(conf->conv_png, prev->conv_png, 1);
+
+    ngx_conf_merge_value(conf->white_tp, prev->white_tp, 1);
+
     ngx_conf_merge_size_value(conf->buffer_size, prev->buffer_size,
                               1 * 1024 * 1024);
 
+    ngx_conf_merge_str_value(conf->watermark, prev->watermark, NULL);
+    ngx_conf_merge_str_value(conf->watermark_position, prev->watermark_position, "bottom-right");
+    
+    ngx_conf_merge_value(conf->watermark_height_from, prev->watermark_height_from, 0);
+    ngx_conf_merge_value(conf->watermark_width_from, prev->watermark_height_from, 0);
+
     return NGX_CONF_OK;
 }
 
@@ -1450,6 +1692,12 @@
     } else if (ngx_strcmp(value[i].data, "crop") == 0) {
         imcf->filter = NGX_HTTP_IMAGE_CROP;
 
+    } else if (ngx_strcmp(value[i].data, "watermark") == 0) {
+        imcf->filter = NGX_HTTP_IMAGE_WATERMARK;
+
+    } else if (ngx_strcmp(value[i].data, "box") == 0) {
+        imcf->filter = NGX_HTTP_IMAGE_BOX;
+
     } else {
         goto failed;
     }
